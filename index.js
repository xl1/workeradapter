// Generated by CoffeeScript 1.7.1
(function() {
  var WorkerAdapter, uuid,
    __slice = [].slice;

  uuid = (function() {
    var re, replacer;
    re = /[xy]/g;
    replacer = function(c) {
      var r;
      r = Math.random() * 16 | 0;
      return (c === 'x' ? r : r & 3 | 8).toString(16);
    };
    return function() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(re, replacer).toUpperCase();
    };
  })();

  WorkerAdapter = (function() {
    WorkerAdapter.makeWorker = function(code) {
      var blob;
      blob = new Blob([code], {
        type: 'text/javascript'
      });
      return new Worker(window.URL.createObjectURL(blob));
    };

    function WorkerAdapter(func) {
      this.resolveFunctions = {};
      this.worker = WorkerAdapter.makeWorker("var result = {};\nvar __func = (" + func + ");\naddEventListener('message', function(e){\n  if(e.data.type === 'run'){\n    __func.apply(null, e.data.arguments);\n    postMessage({ type: 'end', result: result, original: e.data });\n  }\n}, false);");
      this.worker.addEventListener('message', (function(_this) {
        return function(_arg) {
          var data, id, _base;
          data = _arg.data;
          if (data.type === 'end') {
            id = data.original.id;
            if (typeof (_base = _this.resolveFunctions)[id] === "function") {
              _base[id](data);
            }
            return delete _this.resolveFunctions[id];
          }
        };
      })(this), false);
    }

    WorkerAdapter.prototype.run = function() {
      var args, id;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      id = uuid();
      return new Promise((function(_this) {
        return function(resolve, reject) {
          _this.resolveFunctions[id] = resolve;
          return _this.worker.postMessage({
            type: 'run',
            id: id,
            "arguments": args
          });
        };
      })(this));
    };

    return WorkerAdapter;

  })();

  if ('self' in this) {
    this.WorkerAdapter = WorkerAdapter;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = WorkerAdapter;
  }

}).call(this);
